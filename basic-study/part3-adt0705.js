import readlineSync from "readline-sync";
import figlet from "figlet";
import gradient from "gradient-string";

import chalk from "chalk";
import chalkAnimation from "chalk-animation";

import { setTimeout as waitingTime } from "timers/promises";
console.clear();

const greetWord1 = "Willkommen zu deinem Abenteuer \n";
const greetWord2 =
    "                       in der Welt       \n                  der Haustierpflege       \n               und Abenteuer";

// ÈóÆÈ¢òÈÄâÈ°π
const petType = [
    "Tiger üêØ (seine Angriffskraft ist h√∂her)",
    "Affe üêí (seine Intelligenz ist h√∂her)",
    "Hase üê∞ (seine Zuneigung ist h√∂her)",
];
let petName = "";
// ÂàùÂßãÈÄâÊã©Á¥¢Âºï
let selectedIndex = 0;
//ÈáçÊñ∞ËøõÂÖ•‰∏ªÂú∞ÂõæÁöÑÂà§Êñ≠
let restart = false;
let goPetMap = false;

function printWelcomeMessage() {
    figlet(greetWord1, { font: "Standard" }, function (err, data1) {
        const rainbowText = chalkAnimation.rainbow(data1);

        setTimeout(() => {
            rainbowText.stop();
            figlet(greetWord2, { font: "Small" }, function (err, data2) {
                const rainbowText1 = chalkAnimation.rainbow(data2);

                setTimeout(() => {
                    rainbowText1.stop();
                    console.clear();
                    printPetSelection();
                }, 3000);
            });
        }, 1000);
    });
}

async function printPetSelection() {
    while (true) {
        console.log(
            `W√§hle dein Haustier aus: (Use ${chalk.bold.yellow(
                "u"
            )}(up ‚¨ÜÔ∏è) and ${chalk.bold.yellow(
                "d"
            )}(down ‚¨áÔ∏è) to navigate, press ${chalk.bold.blue(
                "Space"
            )} to select), press ${chalk.bold.red("q")} to quit the game)`
        );
        for (let i = 0; i < petType.length; i++) {
            if (i === selectedIndex) {
                console.log("> \x1b[36m" + petType[i] + "\x1b[0m");
            } else {
                console.log("  " + petType[i]);
            }
        }

        const key = readlineSync.keyIn("", {
            hideEchoBack: true,
            mask: "",
            limit: "udq ",
        });
        // Ê†πÊçÆÊåâÈîÆÊõ¥Êñ∞ÈÄâÊã©Á¥¢Âºï
        if (key === "u") {
            selectedIndex =
                selectedIndex === 0 ? petType.length - 1 : selectedIndex - 1;
        } else if (key === "d") {
            selectedIndex =
                selectedIndex === petType.length - 1 ? 0 : selectedIndex + 1;
        } else if (key === "q") {
            // Ctrl+C ÈÄÄÂá∫Á®ãÂ∫è
            process.exit();
        } else if (key === " ") {
            // spaceÈîÆË°®Á§∫ÈÄâÂÆö
            break;
        }
        console.clear();
    }
    // ÊâìÂç∞ÊúÄÁªàÈÄâÊã©
    console.log("You selected:", petType[selectedIndex]);
    console.log(chalk.bold.greenBright("Kluge Wahl"));
    petName = readlineSync.question("Wie hei√üt dein Haustier? ");
    //console.log(petName);
    console.log(
        `Bist du bereit? ü•≥ ${chalk.bold.blueBright(
            petName
        )}, Wir beginnen ein neues Abenteuer! ü•≥`
    );

    await waitingTime(3000);
    console.clear();
    startGame();
}

function startGame() {
    // ÂàùÂßãÂåñÊ∏∏ÊàèÂπ∂ÂºÄÂßã
    // const gameInMainMap = new MainMap();
    gameInMainMap.start();
    // myPetCareMode.startPetCareMode();
}

printWelcomeMessage();

let whichPet;
class MainMap {
    constructor() {
        this.map = [
            "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
            "X                         x                                                                 X",
            "X                       x  x                                                                X",
            "X                     x     x                                                               X",
            "X                   x        x                                                              X",
            "X                 x           x                                                             X",
            "X               x              x                                                            X",
            "X              xxxxxxxxxxxxxxxxxx                                                           X",
            "X              x                x                                                           X",
            "X              x                x                                                           X",
            "X              x                x                                                           X",
            "X              x                                                                            X",
            "X              x                                                                            X",
            "X              x                                                                            X",
            "X              xxxxxxxxxxxxxxxxxx                                                           X",
            "X                                                                                           X",
            "X                                                                                           X",
            "X                                                                                           X",
            "X                                                                                           X",
            "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
        ];

        this.playerPosition = { x: 1, y: 1 };
        this.isRunning = true;
        // this.applePositions = [
        //     { x: 20, y: 10 },
        //     { x: 30, y: 11 },
        //     { x: 40, y: 12 },
        // ];
        this.applePositions = { x: 0, y: 0 }; //ÈöèÊú∫ÁîüÊàêËãπÊûúÁöÑ‰ΩçÁΩÆ
        this.generateApples(3); // ÁîüÊàê3‰∏™ËãπÊûú
    }

    generateApples(numApples) {
        for (let i = 0; i < numApples; i++) {
            // ÈöèÊú∫ÁîüÊàêËãπÊûúÁöÑ x Âíå y ÂùêÊ†á
            const randomX =
                Math.floor(Math.random() * (this.map[0].length - 2)) + 1; // ÈÅøÂÖçËãπÊûúË¢´ÊîæÂú®Âú∞ÂõæËæπÁºò
            const randomY =
                Math.floor(Math.random() * (this.map.length - 2)) + 1;
            // Ê£ÄÊü•ÈöèÊú∫ÁîüÊàêÁöÑ‰ΩçÁΩÆÊòØÂê¶‰∏∫Á©∫Âú∞ÔºåËã•‰∏çÊòØÂàôÈáçÊñ∞ÁîüÊàê
            while (this.map[randomY][randomX] !== " ") {
                randomX =
                    Math.floor(Math.random() * (this.map[0].length - 2)) + 1;
                randomY = Math.floor(Math.random() * (this.map.length - 2)) + 1;
            }
            this.applePositions.push({ x: randomX, y: randomY });
        }
    }

    //ÊâìÂç∞‰∏ªÂú∞Âõæ
    printMap() {
        console.clear();
        whichPet = petType[selectedIndex].split(" ")[0]; //??? ‰∏∫‰ΩïÂÆö‰πâÂÖ®Â±ÄÊó∂ÔºåÂèñ‰∏çÂà∞ÂÄº
        for (let row of this.map) {
            // Â∞ÜÁé©ÂÆ∂Ê†áËÆ∞ 'M' ÊõøÊç¢‰∏∫ ASCII Ëâ∫ÊúØ, ‰∏çÂêåÁöÑÂÆ†Áâ©ÂØπÂ∫î‰∏çÂêåÁöÑÂõæÊ†á
            if (whichPet === "Tiger") row = row.replace("M", "üêØ");
            // ËøôÈáåÂèØ‰ª•‰ΩøÁî®‰ªª‰Ωï‰Ω†ÂñúÊ¨¢ÁöÑ ASCII Ëâ∫ÊúØ
            else if (whichPet === "Affe") row = row.replace("M", "üêí");
            else if (whichPet === "Hase") row = row.replace("M", "üê∞");
            console.log(row);
        }
        // ÊâìÂç∞Áé©ÂÆ∂ÂΩìÂâç‰ΩçÁΩÆÂùêÊ†á
        console.log("player's Position:", this.playerPosition);
    }

    movePlayer(direction) {
        let newX = this.playerPosition.x;
        let newY = this.playerPosition.y;

        switch (direction) {
            case "w":
                newY--;
                break;
            case "s":
                newY++;
                break;
            case "a":
                newX--;
                break;
            case "d":
                newX++;
                break;
            default:
                break;
        }

        if (this.map[newY][newX] === " ") {
            this.map[this.playerPosition.y] =
                this.map[this.playerPosition.y].slice(
                    0,
                    this.playerPosition.x
                ) +
                " " +
                this.map[this.playerPosition.y].slice(
                    this.playerPosition.x + 1
                );
            this.playerPosition.x = newX;
            this.playerPosition.y = newY;
            this.map[this.playerPosition.y] =
                this.map[this.playerPosition.y].slice(
                    0,
                    this.playerPosition.x
                ) +
                "M" +
                this.map[this.playerPosition.y].slice(
                    this.playerPosition.x + 1
                );
        }
    }

    start() {
        // let flag = true;
        let move;
        if (restart === true) this.isRunning = true;
        while (this.isRunning) {
            console.log(this.isRunning);
            if (!this.isRunning) break;
            this.printMap();

            // at home
            if (
                this.playerPosition.x >= 16 &&
                this.playerPosition.x <= 30 &&
                this.playerPosition.y >= 8 &&
                this.playerPosition.y <= 13
            ) {
                this.isAtHome = true;
                console.log("Zuhause üè†, sch√∂nes Zuhause üè° !");
                move = readlineSync.keyIn(
                    "Use W/A/S/D to move (or H to hoursMap or Q to quit ): ",
                    { limit: "wasdqh" }
                );
            } else {
                move = readlineSync.keyIn(
                    "Use W/A/S/D to move (or Q to quit): ",
                    { limit: "wasdq" }
                );
            }

            //ËØ¢ÈóÆÊòØÂê¶ËøõÂÖ•ÂÆ†Áâ©ÂÖªÊàêÁ≥ªÁªü
            if (move.toLowerCase() === "h") {
                const isPetCare = readlineSync.question(
                    "Do you want to play with your Pet (y/n)? "
                );
                if (isPetCare === "y") {
                    this.isRunning = false;
                    goPetMap = true;
                    myPetCareMode.startPetCareMode();
                }
            }

            if (move.toLowerCase() === "q") {
                this.isRunning = false;
                console.log("Game over. Thanks for playing!");
                break;
            }

            this.movePlayer(move.toLowerCase());
        }
    }
}
const gameInMainMap = new MainMap();

//Âà†Èô§‰∫Üpart2-....-care0705 ÁöÑÂÆ†Áâ©ÂÖªÊàêÁ≥ªÁªü Âà∞ÊúÄÂêé
